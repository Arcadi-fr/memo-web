:root {
  --color1: #d9b18f;
  --color2: #d95032;
  --color3: #bf3c30;
  --color4: #012623;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background: url(./assets/fond.jpg) center/cover;
  min-height: 100vh;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  color: var(--color1);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  /* Permet d'éviter que les barres de scroll s'affichent lorsque l'animation de la navette sort hors fenêtres */
}

.card {
  background: rgba(255, 255, 255, 0.135);
  width: calc(100% - 50px);
  padding: 20px 20px 10px;
  box-shadow: 0 0 15px white;
  border-radius: 25px;
  -webkit-backdrop-filter: blur(1px);
  /* Pour Safari */
  backdrop-filter: blur(1px);
  /* Pour chrome */
  /*backdrop-filter: blur(5px) ;*/
  /*-webkit-filter: blur(20px) ; */
}

.card:before {
  content: "\2606";
  position: absolute;
  top: 10;
  right: 40px;
  font-size: 2.4rem;
}

h1 {
  margin-bottom: 24px;
  position: relative;
  /* On met le H1 en "relative" pour que le content de l'enfant qui est en "absolut" soit bien en absolut par rapport a son parent.   */
}

h1::after {
  content: "";
  position: absolute;
  background: var(--color1);
  height: 2px;
  border-radius: 5px;
  width: 100%;
  bottom: -15px;
  left: 50%;
  transform: translateX(-50%) scaleX(0);
  animation: h1anim 5s ease-in-out forwards;
  transform-origin: left;
}

@keyframes h1anim {
  100% {
    transform: translateX(-50%) scaleX(1);
  }
}

.grid-container {
  display: grid;
  grid-template-columns: 20% 80%;
}

.polygon-container {
  /* On ne peut pas donner de forme à polygone car c'est un clip path. 
    Il faut donc travailler avce "filter" sur le parent. */
  filter: drop-shadow(-1px 6px 3px var(--color3));
  /* "place-self" ne fonctionne que parce que le parent est en grid. */
  place-self: center left;
}

.polygon {
  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
  background: linear-gradient(135deg, var(--color1) 0%, var(--color2) 100%);
  height: 100px;
  width: 100px;
}

.polygon::after {
  content: "Un texte";
  position: absolute;
  color: var(--color1);
  background: var(--color4);
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) rotate(345deg);
  width: 90px;
  padding: 4px;
  text-align: center;
}

p {
  line-height: 26px;
  margin: 26px 0;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 4;
  overflow: hidden;
  text-align: justify;
  user-select: none;
}

p::selection {
  background: var(--color4);
}

.checkbox-container {
  display: flex;
  justify-content: space-around;
  margin: 20px 0px 30px;
  perspective: 40px;
}

input[type="checkbox"] {
  display: none;
}

input[type="checkbox"]:checked + label {
  background: var(--color2);
  color: var(--color4);
  border: 1px solid var(--color4);
  transform: scale(1.5);
  filter: brightness(150%);
}

label {
  cursor: pointer;
  border: 1px solid var(--color1);
  background: var(--color4);
  padding: 10px;
  border-radius: 5px;
  transition: 1s;
  user-select: none;
}

label:first-of-type:hover {
  animation: label1 1s infinite linear;
}

@keyframes label1 {
  50% {
    transform: scale(1.4);
  }

  100% {
    transform: scale(1);
  }
}

label:nth-child(4):hover {
  animation: label2 3s infinite;
}

/* Pour la 3D, ne pas oublier de mettre la perpective au parent */
@keyframes label2 {
  33% {
    transform: translateZ(30px);
  }

  66% {
    transform: translateZ(-40px);
  }

  100% {
    transform: translateZ(0);
  }
}

.e-mail {
  text-align: center;
  margin-bottom: 20px;
}

.e-mail input {
  padding: 10px;
  border-radius: 5px;
  outline: none;
  border: 3px solid transparent;
  /* On met la bordure en transparent au lieu de none pour qu'elle est une place, et que la bordure qui apparaît lors du focus ne déplace pas le reste. */
  transition: 1s;
  text-align: center;
  font-size: 1.1rem;
  color: var(--color1);
  min-width: 180px;
  width: 35%;
  max-width: 300px;
}

input[type="text"]:focus {
  /* trasnsition : Les trnasisitons se font sur la balise sans condition. ex: input au lieu de input:focus */
  background: transparent;
  border: 3px solid var(--color1);
  border-radius: 150px;
}

input[type="text"]::placeholder {
  color: var(--color1);
  font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;
}

button {
  display: block;
  cursor: pointer;
  background: var(--color4);
  font-size: 1.3rem;
  padding: 10px 20px;
  border-radius: 150px;
  margin: 0 auto;
  transition: 0.4s;
  color: var(--color1);
}

button:active {
  transform: scale(1.2);
}

button:hover {
  letter-spacing: 3px;
  color: var(--color4);
  background: var(--color2);
}

button:hover + .lien-cgv,
.lien-cgv:hover {
  opacity: 1;
  transform: translate(0);
}

.lien-cgv {
  margin: 10px 0 10px;
  display: block;
  color: var(--color2);
  text-align: center;
  opacity: 0;
  transform: translate(20px);
  transition: 0.4s;
}

.lien-cgv:visited {
  color: var(--color1);
}

img {
  height: 40px;
  position: absolute;
  filter: drop-shadow(0px 6px 3px rgba(255, 255, 0, 0.6));
  z-index: -1;
  animation: navette 30s infinite linear;
}

@keyframes navette {
  0% {
    top: 2%;
    left: 2%;
    transform: rotate(10deg);
  }

  10% {
    top: 6%;
    left: 30%;
    transform: rotate(10deg);
  }

  20% {
    top: 9%;
    left: 60%;
    transform: rotate(10deg);
  }

  30% {
    top: 0%;
    left: 80%;
    transform: rotate(10deg);
  }

  40% {
    top: 110%;
    left: 110%;
    transform: rotate(10deg);
  }

  50% {
    top: 50%;
    left: 80%;
    transform: rotate(10deg);
  }

  60% {
    top: 90%;
    left: 90%;
    transform: rotate(10deg);
  }

  70% {
    top: 85%;
    left: 50%;
    transform: rotate(10deg);
  }

  80% {
    top: 80%;
    left: 30%;
    transform: rotate(10deg);
  }

  90% {
    top: 50%;
    left: 15%;
    transform: rotate(10deg);
  }

  100% {
    top: 2%;
    left: 2%;
    transform: rotate(10deg);
  }
}
